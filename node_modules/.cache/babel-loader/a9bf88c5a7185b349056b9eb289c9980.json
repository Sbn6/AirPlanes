{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Serban\\\\OneDrive\\\\Apps\\\\AirPlanes\\\\src\\\\Test.js\",\n    _s = $RefreshSig$();\n\nimport { toHaveDisplayValue } from \"@testing-library/jest-dom/dist/matchers\";\nimport { render } from \"@testing-library/react\";\nimport { useState } from \"react\";\nimport Learn from \"./Learn1\";\nimport { useHistory } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar intrebari = [new test(\"Ce este o matrice?\", \"2\", \"Informatica\", \"Matrici\", \"\", [\"Un tablou unidimensional\", \"Un tablou bidimensional\", \"Un tablou cu 3 dimensiuni\", \"Un tablou cu 4 dimensiuni\"]), new test(\"Indicați expresia C/C++ cu valoarea 0\", \"3\", \"Informatica\", \"Expresii\", \"\", [\"sqrt(16)==4\", \"45*5==200+5*5\", \"25/10==15/10\", \"64/4==8*2\"]), new test(\"Numim pădure un graf neorientat în care fiecare componentă conexă a sa este un arbore. Orice pădure cu cel putin doi arbori este un graf care:\", \"1\", \"Informatica\", \"Grafuri\", \"\", [\"Are cicluri şi este conex\", \"Are cicluri şi nu este conex\", \"Nu are cicluri şi este conex\", \"Nu are cicluri şi nu este conex\"]), new test(\"Structura repetitivă cu test inițial se implementează cu instrucțiunea:\", \"2\", \"Informatica\", \"Structuri repetitive\", \"\", [\"pentru\", \"cât timp\", \"daca\", \"repeta\"]), new test(\"Alegeți declararea corectă a unei variabile structurale cu 2 componente, una de tip real și una de tip întreg.\", \"2\", \"Informatica\", \"Declararea variabilelor\", \"\", [\"int float x[10] ;\", \"struct { float x; int y} a;\", \"float a[20];\", \"struct { float x; int y} int a;\"]), new test(\"Variabilele x și y sunt întregi. Indicați expresia C/C++ echivalentă cu (x<3)&&(y>=5).\", \"1\", \"Informatica\", \"Expresii\", \"\", [\"!(!(x<3)||!(y>=5))\", \"!(x>=3)&&(y<5)\", \"!((x>=3)&&(y<5))\", \"!((x<3)||(y>=5))\"]), new test(\"Valorile care pot reprezenta gradele nodurilor unui graf neorientat, cu 6 noduri, sunt:\", \"3\", \"Informatica\", \"Grafuri\", \"\", [\"2,2,5,5,0,1\", \"6,5,4,3,2,1\", \"2,2,3,4,0,3\", \"1,0,0,2,2,2\"]), new test(\"Ce se afisează, în urma executării următoarelor instrucțiuni: int b[5]={88,87,76,36,21},i;for( i=1;i<4;i++){cout<<b[i]<<' ';}\", \"1\", \"Informatica\", \"Structuri repetitive\", \"\", [\"87 76 36\", \"88 87 76 36 21\", \"87 76 36 21\", \"Secventa are erori de sintaxa.\"]), new test(\"Variabilele i şi j sunt de tip întreg, iar variabila m memorează un tablou bidimensional cu 5 linii şi 5 coloane, numerotate de la 0 la 4, cu elemente numere întregi. O expresie C/C++ a cărei valoare este egală cu produsul dintre primul element de pe linia i și ultimul element de pe coloana j din acest tablou este:\", \"3\", \"Informatica\", \"Matrici\", \"\", [\"m(0,i)*m(j,4)\", \"m(i)(0)*m(4)(j)\", \"m[i][0]*m[4][j]\", \"m[0,i]*m[j,4]\"]), new test(\"Utilizând metoda backtracking se generează toate modalităţile de a scrie numărul 6 ca sumă de numere naturale impare. Termenii fiecărei sume sunt în ordine crescătoare. Cele patru soluţii sunt obţinute în această ordine: 1+1+1+1+1+1; 1+1+1+3; 1+5; 3+3. Aplicând acelaşi algoritm, numărul soluţiilor obţinute pentru scrierea lui 8 este:\", \"2\", \"Informatica\", \"Backtracking\", \"\", [\"9\", \"6\", \"5\", \"8\"]), new test('Cine este purtătorul mesajului moralizator al nuvelei \"Moara cu Noroc\" ', \"2\", \"Romana\", \"Literatura\", \"\", [\"Lică Sămădăul\", \"Soacra lui Ghiță\", \"Ghiță\", \"Ana\"]), new test('Ce tip de opera este \"Povestea lui Harap-Alb\"?', \"1\", \"Romana\", \"Literatura\", \"\", [\"Basm\", \"Nuvelă\", \"Roman\", \"Comedie\"]), new test(\"Cine a scris Floare Albastra?\", \"3\", \"Romana\", \"Literatura\", \"\", [\"Ion Creanga\", \"Ioan Slavici\", \"Mihai Eminescu\", \"Ion Pillat\"]), new test('Cine a scris \"Povestea lui Harap-Alb\"?', \"2\", \"Romana\", \"Literatura\", \"\", [\"Ioan Slavici\", \"Ion Creanga\", \"Mihai Eminescu\", \"Ion Luca Caragiale\"]), new test('Poemul \"Luceafărul\" apare pentru prima dată:', \"3\", \"Romana\", \"Marii Clasici\", \"\", [\"la București\", \"la Timisoara, în anul 1883\", 'la Viena, în Almanahul societății academice social-literare \"România jună\"', 'în revista \"Convorbiri literare\" din Iași']), new test(\"Ecuatia dreptei care trece prin punctele M(1,2) si N(2,5)  este:\", \"4\", \"Matematica\", \"Geometrie\", \"\", [\"2x + y = 2\", \"x = 0\", \"y = 3\", \"3x - y = 1\"]), new test(\"Sa se determine coordonatele mijlocului segmentului AB, unde A(-3,4) si B(7,-2)\", \"1\", \"Matematica\", \"Geometrie\", \"\", [\"(2,1)\", \"(1,2)\", \"(7,-2)\", \"(-3,4)\"]), new test(\"Aria cercului de diametru 2 este:\", \"2\", \"Matematica\", \"Geometrie\", \"\", [\"3π\", \"π;\", \"6π;\", \"4π;\"]), new test(\"Daca x ≤ 3 - 2x atunci:\", \"4\", \"Matematica\", \"Algebra\", \"\", [\"x ≤ -5 \", \"x = 0 \", \"x ≤ -11\", \"x ≤ 1 \"]), new test(\"Solutia ecuatiei 5x-12=3x este:\", \"2\", \"Matematica\", \"Algebra\", \"\", [\"-5\", \"6\", \"4\", \"5\"])];\nvar materii = [];\nvar capitole = [];\nvar gresite = 0;\nvar testing = Learn.returnvalues();\nvar weekend = testing[4]; //Frequency array for wrong answers\n\nconst frecventaMat = new Array(100).fill(0);\nvar wrongIntrebari0 = [];\nvar wrongIntrebari1 = [];\nvar wrongIntrebari2 = [];\nvar raspunsuriCorecteInformatica = [];\nvar raspunsuriGresiteInformatica = [];\nvar raspunsuriCorecteMatematica = [];\nvar raspunsuriGresiteMatematica = [];\nvar raspunsuriCorecteAlt = [];\nvar raspunsuriGresiteAlt = []; //Simulate Struct\n\nfunction test(intrebare, raspuns, materie, capitol, input) {\n  let raspunsuri = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n  this.intrebare = intrebare;\n  this.raspuns = raspuns;\n  this.materie = materie;\n  this.capitol = capitol;\n  this.input = input;\n  this.raspunsuri = raspunsuri;\n}\n\nvar capitoleGresiteInformatica = [];\nvar capitoleGresiteMatematica = [];\nvar capitoleGresiteAlt = [];\nvar counter1 = 0;\nvar counter2 = 0;\nvar counter3 = 0; //API Calls\n\nvar API = {\n  getMaterii: function () {\n    return materii;\n  },\n  getCapitole: function () {\n    return capitole;\n  },\n  getFrecventa: function () {\n    return frecventaMat;\n  },\n  getGresite: function () {\n    return gresite;\n  },\n  getIntrebariInformatica: function () {\n    return wrongIntrebari0;\n  },\n  getIntrebariMatematica: function () {\n    return wrongIntrebari1;\n  },\n  getIntrebariAlt: function () {\n    return wrongIntrebari2;\n  },\n  getRaspunsuriCorecteInfo: function () {\n    return raspunsuriCorecteInformatica;\n  },\n  getRaspunsuriGresiteInfo: function () {\n    return raspunsuriGresiteInformatica;\n  },\n  getRaspunsuriCorecteMate: function () {\n    return raspunsuriCorecteMatematica;\n  },\n  getRaspunsuriGresiteMate: function () {\n    return raspunsuriGresiteMatematica;\n  },\n  getRaspunsuriCorecteAlt: function () {\n    return raspunsuriCorecteAlt;\n  },\n  getRaspunsuriGresiteAlt: function () {\n    return raspunsuriGresiteAlt;\n  },\n  getWeekend: function () {\n    return weekend;\n  },\n  getCapitoleGresiteInformatica: function () {\n    return capitoleGresiteInformatica;\n  },\n  getCapitoleGresiteMatematica: function () {\n    return capitoleGresiteMatematica;\n  },\n  getCapitoleGresiteAlt: function () {\n    return capitoleGresiteAlt;\n  }\n};\nvar contor1 = 0;\nvar contor2 = 0;\nvar contor3 = 0;\nvar raspInfCorectContor = 0;\nvar raspInfGresitContor = 0;\nvar raspMatCorectContor = 0;\nvar raspMatGresitContor = 0;\nvar raspAltCorectContor = 0;\nvar raspAltGresitContor = 0;\nvar lastmaterie = \"\";\nvar currAns = \"\";\n\nconst Test = () => {\n  _s();\n\n  //Only allow one answer per question\n  const activateButton = id => {\n    document.getElementById(id).classList.add(\"active\");\n    currAns = id - 1;\n\n    for (var i = 1; i <= 4; i++) {\n      if (i != id) document.getElementById(i).classList.remove(\"active\");\n    }\n  }; //Reactive variables, used to keep track of the current question and the current word for the button\n\n\n  const [counter, setCounter] = useState(0);\n  const [currWord, setWord] = useState(\"Next\");\n  const history = useHistory(); //Tracks the wrong answers in the frequency array\n\n  const submit = () => {\n    if (currAns == intrebari[counter].raspuns - 1) console.log(currAns);else {\n      materii[gresite] = intrebari[counter].materie;\n      capitole[gresite++] = intrebari[counter].capitol;\n      frecventaMat[materii[gresite - 1]] = frecventaMat[materii[gresite - 1]] ? frecventaMat[materii[gresite - 1]] + 1 : 1;\n\n      if (intrebari[counter].materie == \"Informatica\") {\n        console.log(\"GRESITE CAPITOLE INFORMATICA : \" + counter1);\n        capitoleGresiteInformatica[counter1++] = intrebari[counter].capitol;\n        wrongIntrebari0[contor1++] = intrebari[counter].intrebare;\n        raspunsuriGresiteInformatica[raspInfGresitContor++] = intrebari[counter].raspunsuri[currAns];\n        raspunsuriCorecteInformatica[raspInfCorectContor++] = intrebari[counter].raspunsuri[intrebari[counter].raspuns - 1];\n      } else if (intrebari[counter].materie == \"Matematica\") {\n        console.log(\"GRESITE CAPITOLE MATEMATICA : \" + counter2);\n        capitoleGresiteMatematica[counter2++] = intrebari[counter].capitol;\n        wrongIntrebari1[contor2++] = intrebari[counter].intrebare;\n        raspunsuriGresiteMatematica[raspMatGresitContor++] = intrebari[counter].raspunsuri[currAns];\n        raspunsuriCorecteMatematica[raspMatCorectContor++] = intrebari[counter].raspunsuri[intrebari[counter].raspuns - 1];\n      } else if (intrebari[counter].materie == \"Romana\") {\n        console.log(\"GRESITE CAPITOLE ALTA : \" + counter3);\n        capitoleGresiteAlt[counter3++] = intrebari[counter].capitol;\n        wrongIntrebari2[contor3++] = intrebari[counter].intrebare;\n        raspunsuriGresiteAlt[raspAltGresitContor++] = intrebari[counter].raspunsuri[currAns];\n        raspunsuriCorecteAlt[raspAltCorectContor++] = intrebari[counter].raspunsuri[intrebari[counter].raspuns - 1];\n      }\n\n      console.log(currAns);\n    }\n\n    if (counter >= intrebari.length - 2) {\n      setWord(\"Finish\");\n    }\n\n    if (counter == intrebari.length - 1) {\n      history.push(\"/results\");\n    }\n\n    setCounter(count => count + 1);\n  }; //Renders the questions and answers\n\n\n  function renderQuestion(id) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"card-text\",\n      children: [/*#__PURE__*/_jsxDEV(\"font\", {\n        size: 6,\n        children: intrebari[id].intrebare\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"list-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"list-group-item list-group-item-action\",\n          id: \"1\",\n          onClick: () => {\n            activateButton(1);\n          },\n          children: intrebari[id].raspunsuri[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"list-group-item list-group-item-action\",\n          id: \"2\",\n          onClick: () => {\n            activateButton(2);\n          },\n          children: intrebari[id].raspunsuri[1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"list-group-item list-group-item-action\",\n          id: \"3\",\n          onClick: () => {\n            activateButton(3);\n          },\n          children: intrebari[id].raspunsuri[2]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"list-group-item list-group-item-action\",\n          id: \"4\",\n          onClick: () => {\n            activateButton(4);\n          },\n          children: intrebari[id].raspunsuri[3]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 7\n    }, this);\n  } //Returns the appropriate content depending on the number of questions remaining\n\n\n  const returnWord = length => {\n    if (length == 1) return length + \" intrebare\";else return length + \" intrebari\";\n  }; //Starts from 0 : currentobjects, globalTime, learningMode, difficultyLevel, weekend\n\n\n  var content = Learn.returnvalues(); //Renders the final page\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"test\",\n    children: [/*#__PURE__*/_jsxDEV(\"font\", {\n      size: 24,\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"display-1 position-absolute top-0 start-50\",\n        style: {\n          marginTop: \"7.5rem\"\n        },\n        children: \"Test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"romana\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"position-absolute top-50 start-50 translate-middle\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm-6\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card\",\n              style: {\n                width: \"40rem\"\n              },\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"card-body\",\n                children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                  className: \"card-title\",\n                  children: intrebari[counter].materie\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 441,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n                  class: \"card-subtitle mb-2 text-muted\",\n                  children: returnWord(intrebari.filter(x => x.materie == intrebari[counter].materie).length)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 442,\n                  columnNumber: 19\n                }, this), renderQuestion(counter), /*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"button\",\n                  className: \"btn btn-success\",\n                  onClick: submit,\n                  children: currWord\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 450,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 440,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 439,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 438,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 426,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Test, \"a4CXANP53wUMa01u5F1vx7xRp1Y=\", false, function () {\n  return [useHistory];\n});\n\n_c = Test;\nexport default {\n  Test,\n  API\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"names":["toHaveDisplayValue","render","useState","Learn","useHistory","intrebari","test","materii","capitole","gresite","testing","returnvalues","weekend","frecventaMat","Array","fill","wrongIntrebari0","wrongIntrebari1","wrongIntrebari2","raspunsuriCorecteInformatica","raspunsuriGresiteInformatica","raspunsuriCorecteMatematica","raspunsuriGresiteMatematica","raspunsuriCorecteAlt","raspunsuriGresiteAlt","intrebare","raspuns","materie","capitol","input","raspunsuri","capitoleGresiteInformatica","capitoleGresiteMatematica","capitoleGresiteAlt","counter1","counter2","counter3","API","getMaterii","getCapitole","getFrecventa","getGresite","getIntrebariInformatica","getIntrebariMatematica","getIntrebariAlt","getRaspunsuriCorecteInfo","getRaspunsuriGresiteInfo","getRaspunsuriCorecteMate","getRaspunsuriGresiteMate","getRaspunsuriCorecteAlt","getRaspunsuriGresiteAlt","getWeekend","getCapitoleGresiteInformatica","getCapitoleGresiteMatematica","getCapitoleGresiteAlt","contor1","contor2","contor3","raspInfCorectContor","raspInfGresitContor","raspMatCorectContor","raspMatGresitContor","raspAltCorectContor","raspAltGresitContor","lastmaterie","currAns","Test","activateButton","id","document","getElementById","classList","add","i","remove","counter","setCounter","currWord","setWord","history","submit","console","log","length","push","count","renderQuestion","returnWord","content","marginTop","width","filter","x"],"sources":["C:/Users/Serban/OneDrive/Apps/AirPlanes/src/Test.js"],"sourcesContent":["import { toHaveDisplayValue } from \"@testing-library/jest-dom/dist/matchers\";\nimport { render } from \"@testing-library/react\";\n\nimport { useState } from \"react\";\n\nimport Learn from \"./Learn1\";\n\nimport { useHistory } from \"react-router-dom\";\n\nvar intrebari = [\n  new test(\"Ce este o matrice?\", \"2\", \"Informatica\", \"Matrici\", \"\", [\n    \"Un tablou unidimensional\",\n    \"Un tablou bidimensional\",\n    \"Un tablou cu 3 dimensiuni\",\n    \"Un tablou cu 4 dimensiuni\",\n  ]),\n  new test(\n    \"Indicați expresia C/C++ cu valoarea 0\",\n    \"3\",\n    \"Informatica\",\n    \"Expresii\",\n    \"\",\n    [\"sqrt(16)==4\", \"45*5==200+5*5\", \"25/10==15/10\", \"64/4==8*2\"]\n  ),\n  new test(\n    \"Numim pădure un graf neorientat în care fiecare componentă conexă a sa este un arbore. Orice pădure cu cel putin doi arbori este un graf care:\",\n    \"1\",\n    \"Informatica\",\n    \"Grafuri\",\n    \"\",\n    [\n      \"Are cicluri şi este conex\",\n      \"Are cicluri şi nu este conex\",\n      \"Nu are cicluri şi este conex\",\n      \"Nu are cicluri şi nu este conex\",\n    ]\n  ),\n  new test(\n    \"Structura repetitivă cu test inițial se implementează cu instrucțiunea:\",\n    \"2\",\n    \"Informatica\",\n    \"Structuri repetitive\",\n    \"\",\n    [\"pentru\", \"cât timp\", \"daca\", \"repeta\"]\n  ),\n  new test(\n    \"Alegeți declararea corectă a unei variabile structurale cu 2 componente, una de tip real și una de tip întreg.\",\n    \"2\",\n    \"Informatica\",\n    \"Declararea variabilelor\",\n    \"\",\n    [\n      \"int float x[10] ;\",\n      \"struct { float x; int y} a;\",\n      \"float a[20];\",\n      \"struct { float x; int y} int a;\",\n    ]\n  ),\n  new test(\n    \"Variabilele x și y sunt întregi. Indicați expresia C/C++ echivalentă cu (x<3)&&(y>=5).\",\n    \"1\",\n    \"Informatica\",\n    \"Expresii\",\n    \"\",\n    [\n      \"!(!(x<3)||!(y>=5))\",\n      \"!(x>=3)&&(y<5)\",\n      \"!((x>=3)&&(y<5))\",\n      \"!((x<3)||(y>=5))\",\n    ]\n  ),\n  new test(\n    \"Valorile care pot reprezenta gradele nodurilor unui graf neorientat, cu 6 noduri, sunt:\",\n    \"3\",\n    \"Informatica\",\n    \"Grafuri\",\n    \"\",\n    [\"2,2,5,5,0,1\", \"6,5,4,3,2,1\", \"2,2,3,4,0,3\", \"1,0,0,2,2,2\"]\n  ),\n  new test(\n    \"Ce se afisează, în urma executării următoarelor instrucțiuni: int b[5]={88,87,76,36,21},i;for( i=1;i<4;i++){cout<<b[i]<<' ';}\",\n    \"1\",\n    \"Informatica\",\n    \"Structuri repetitive\",\n    \"\",\n    [\n      \"87 76 36\",\n      \"88 87 76 36 21\",\n      \"87 76 36 21\",\n      \"Secventa are erori de sintaxa.\",\n    ]\n  ),\n  new test(\n    \"Variabilele i şi j sunt de tip întreg, iar variabila m memorează un tablou bidimensional cu 5 linii şi 5 coloane, numerotate de la 0 la 4, cu elemente numere întregi. O expresie C/C++ a cărei valoare este egală cu produsul dintre primul element de pe linia i și ultimul element de pe coloana j din acest tablou este:\",\n    \"3\",\n    \"Informatica\",\n    \"Matrici\",\n    \"\",\n    [\"m(0,i)*m(j,4)\", \"m(i)(0)*m(4)(j)\", \"m[i][0]*m[4][j]\", \"m[0,i]*m[j,4]\"]\n  ),\n  new test(\n    \"Utilizând metoda backtracking se generează toate modalităţile de a scrie numărul 6 ca sumă de numere naturale impare. Termenii fiecărei sume sunt în ordine crescătoare. Cele patru soluţii sunt obţinute în această ordine: 1+1+1+1+1+1; 1+1+1+3; 1+5; 3+3. Aplicând acelaşi algoritm, numărul soluţiilor obţinute pentru scrierea lui 8 este:\",\n    \"2\",\n    \"Informatica\",\n    \"Backtracking\",\n    \"\",\n    [\"9\", \"6\", \"5\", \"8\"]\n  ),\n  new test(\n    'Cine este purtătorul mesajului moralizator al nuvelei \"Moara cu Noroc\" ',\n    \"2\",\n    \"Romana\",\n    \"Literatura\",\n    \"\",\n    [\"Lică Sămădăul\", \"Soacra lui Ghiță\", \"Ghiță\", \"Ana\"]\n  ),\n  new test(\n    'Ce tip de opera este \"Povestea lui Harap-Alb\"?',\n    \"1\",\n    \"Romana\",\n    \"Literatura\",\n    \"\",\n    [\"Basm\", \"Nuvelă\", \"Roman\", \"Comedie\"]\n  ),\n  new test(\"Cine a scris Floare Albastra?\", \"3\", \"Romana\", \"Literatura\", \"\", [\n    \"Ion Creanga\",\n    \"Ioan Slavici\",\n    \"Mihai Eminescu\",\n    \"Ion Pillat\",\n  ]),\n  new test(\n    'Cine a scris \"Povestea lui Harap-Alb\"?',\n    \"2\",\n    \"Romana\",\n    \"Literatura\",\n    \"\",\n    [\"Ioan Slavici\", \"Ion Creanga\", \"Mihai Eminescu\", \"Ion Luca Caragiale\"]\n  ),\n  new test(\n    'Poemul \"Luceafărul\" apare pentru prima dată:',\n    \"3\",\n    \"Romana\",\n    \"Marii Clasici\",\n    \"\",\n    [\n      \"la București\",\n      \"la Timisoara, în anul 1883\",\n      'la Viena, în Almanahul societății academice social-literare \"România jună\"',\n      'în revista \"Convorbiri literare\" din Iași',\n    ]\n  ),\n  new test(\n    \"Ecuatia dreptei care trece prin punctele M(1,2) si N(2,5)  este:\",\n    \"4\",\n    \"Matematica\",\n    \"Geometrie\",\n    \"\",\n    [\"2x + y = 2\", \"x = 0\", \"y = 3\", \"3x - y = 1\"]\n  ),\n  new test(\n    \"Sa se determine coordonatele mijlocului segmentului AB, unde A(-3,4) si B(7,-2)\",\n    \"1\",\n    \"Matematica\",\n    \"Geometrie\",\n    \"\",\n    [\"(2,1)\", \"(1,2)\", \"(7,-2)\", \"(-3,4)\"]\n  ),\n  new test(\n    \"Aria cercului de diametru 2 este:\",\n    \"2\",\n    \"Matematica\",\n    \"Geometrie\",\n    \"\",\n    [\"3π\", \"π;\", \"6π;\", \"4π;\"]\n  ),\n  new test(\"Daca x ≤ 3 - 2x atunci:\", \"4\", \"Matematica\", \"Algebra\", \"\", [\n    \"x ≤ -5 \",\n    \"x = 0 \",\n    \"x ≤ -11\",\n    \"x ≤ 1 \",\n  ]),\n  new test(\n    \"Solutia ecuatiei 5x-12=3x este:\",\n    \"2\",\n    \"Matematica\",\n    \"Algebra\",\n    \"\",\n    [\"-5\", \"6\", \"4\", \"5\"]\n  ),\n];\n\nvar materii = [];\nvar capitole = [];\n\nvar gresite = 0;\n\nvar testing = Learn.returnvalues();\n\nvar weekend = testing[4];\n\n//Frequency array for wrong answers\nconst frecventaMat = new Array(100).fill(0);\nvar wrongIntrebari0 = [];\nvar wrongIntrebari1 = [];\nvar wrongIntrebari2 = [];\nvar raspunsuriCorecteInformatica = [];\nvar raspunsuriGresiteInformatica = [];\nvar raspunsuriCorecteMatematica = [];\nvar raspunsuriGresiteMatematica = [];\nvar raspunsuriCorecteAlt = [];\nvar raspunsuriGresiteAlt = [];\n\n//Simulate Struct\nfunction test(intrebare, raspuns, materie, capitol, input, raspunsuri = []) {\n  this.intrebare = intrebare;\n  this.raspuns = raspuns;\n  this.materie = materie;\n  this.capitol = capitol;\n  this.input = input;\n  this.raspunsuri = raspunsuri;\n}\n\nvar capitoleGresiteInformatica = [];\nvar capitoleGresiteMatematica = [];\nvar capitoleGresiteAlt = [];\n\nvar counter1 = 0;\nvar counter2 = 0;\nvar counter3 = 0;\n\n//API Calls\nvar API = {\n  getMaterii: function () {\n    return materii;\n  },\n  getCapitole: function () {\n    return capitole;\n  },\n  getFrecventa: function () {\n    return frecventaMat;\n  },\n  getGresite: function () {\n    return gresite;\n  },\n  getIntrebariInformatica: function () {\n    return wrongIntrebari0;\n  },\n  getIntrebariMatematica: function () {\n    return wrongIntrebari1;\n  },\n  getIntrebariAlt: function () {\n    return wrongIntrebari2;\n  },\n  getRaspunsuriCorecteInfo: function () {\n    return raspunsuriCorecteInformatica;\n  },\n  getRaspunsuriGresiteInfo: function () {\n    return raspunsuriGresiteInformatica;\n  },\n  getRaspunsuriCorecteMate: function () {\n    return raspunsuriCorecteMatematica;\n  },\n  getRaspunsuriGresiteMate: function () {\n    return raspunsuriGresiteMatematica;\n  },\n  getRaspunsuriCorecteAlt: function () {\n    return raspunsuriCorecteAlt;\n  },\n  getRaspunsuriGresiteAlt: function () {\n    return raspunsuriGresiteAlt;\n  },\n  getWeekend: function () {\n    return weekend;\n  },\n  getCapitoleGresiteInformatica: function () {\n    return capitoleGresiteInformatica;\n  },\n  getCapitoleGresiteMatematica: function () {\n    return capitoleGresiteMatematica;\n  },\n  getCapitoleGresiteAlt: function () {\n    return capitoleGresiteAlt;\n  },\n};\n\nvar contor1 = 0;\nvar contor2 = 0;\nvar contor3 = 0;\n\nvar raspInfCorectContor = 0;\nvar raspInfGresitContor = 0;\nvar raspMatCorectContor = 0;\nvar raspMatGresitContor = 0;\nvar raspAltCorectContor = 0;\nvar raspAltGresitContor = 0;\n\nvar lastmaterie = \"\";\n\nvar currAns = \"\";\n\nconst Test = () => {\n  //Only allow one answer per question\n  const activateButton = (id) => {\n    document.getElementById(id).classList.add(\"active\");\n    currAns = id - 1;\n    for (var i = 1; i <= 4; i++) {\n      if (i != id) document.getElementById(i).classList.remove(\"active\");\n    }\n  };\n\n  //Reactive variables, used to keep track of the current question and the current word for the button\n  const [counter, setCounter] = useState(0);\n  const [currWord, setWord] = useState(\"Next\");\n\n  const history = useHistory();\n\n  //Tracks the wrong answers in the frequency array\n  const submit = () => {\n    if (currAns == intrebari[counter].raspuns - 1) console.log(currAns);\n    else {\n      materii[gresite] = intrebari[counter].materie;\n      capitole[gresite++] = intrebari[counter].capitol;\n      frecventaMat[materii[gresite - 1]] = frecventaMat[materii[gresite - 1]]\n        ? frecventaMat[materii[gresite - 1]] + 1\n        : 1;\n      if (intrebari[counter].materie == \"Informatica\") {\n        console.log(\"GRESITE CAPITOLE INFORMATICA : \" + counter1);\n        capitoleGresiteInformatica[counter1++] = intrebari[counter].capitol;\n        wrongIntrebari0[contor1++] = intrebari[counter].intrebare;\n        raspunsuriGresiteInformatica[raspInfGresitContor++] =\n          intrebari[counter].raspunsuri[currAns];\n        raspunsuriCorecteInformatica[raspInfCorectContor++] =\n          intrebari[counter].raspunsuri[intrebari[counter].raspuns - 1];\n      } else if (intrebari[counter].materie == \"Matematica\") {\n        console.log(\"GRESITE CAPITOLE MATEMATICA : \" + counter2);\n        capitoleGresiteMatematica[counter2++] = intrebari[counter].capitol;\n        wrongIntrebari1[contor2++] = intrebari[counter].intrebare;\n        raspunsuriGresiteMatematica[raspMatGresitContor++] =\n          intrebari[counter].raspunsuri[currAns];\n        raspunsuriCorecteMatematica[raspMatCorectContor++] =\n          intrebari[counter].raspunsuri[intrebari[counter].raspuns - 1];\n      } else if (intrebari[counter].materie == \"Romana\") {\n        console.log(\"GRESITE CAPITOLE ALTA : \" + counter3);\n        capitoleGresiteAlt[counter3++] = intrebari[counter].capitol;\n        wrongIntrebari2[contor3++] = intrebari[counter].intrebare;\n        raspunsuriGresiteAlt[raspAltGresitContor++] =\n          intrebari[counter].raspunsuri[currAns];\n        raspunsuriCorecteAlt[raspAltCorectContor++] =\n          intrebari[counter].raspunsuri[intrebari[counter].raspuns - 1];\n      }\n      console.log(currAns);\n    }\n\n    if (counter >= intrebari.length - 2) {\n      setWord(\"Finish\");\n    }\n    if (counter == intrebari.length - 1) {\n      history.push(\"/results\");\n    }\n\n    setCounter((count) => count + 1);\n  };\n\n  //Renders the questions and answers\n  function renderQuestion(id) {\n    return (\n      <p className=\"card-text\">\n        <font size={6}>{intrebari[id].intrebare}</font>\n        <div class=\"list-group\">\n          <button\n            type=\"button\"\n            className=\"list-group-item list-group-item-action\"\n            id=\"1\"\n            onClick={() => {\n              activateButton(1);\n            }}\n          >\n            {intrebari[id].raspunsuri[0]}\n          </button>\n          <button\n            type=\"button\"\n            className=\"list-group-item list-group-item-action\"\n            id=\"2\"\n            onClick={() => {\n              activateButton(2);\n            }}\n          >\n            {intrebari[id].raspunsuri[1]}\n          </button>\n          <button\n            type=\"button\"\n            className=\"list-group-item list-group-item-action\"\n            id=\"3\"\n            onClick={() => {\n              activateButton(3);\n            }}\n          >\n            {intrebari[id].raspunsuri[2]}\n          </button>\n          <button\n            type=\"button\"\n            className=\"list-group-item list-group-item-action\"\n            id=\"4\"\n            onClick={() => {\n              activateButton(4);\n            }}\n          >\n            {intrebari[id].raspunsuri[3]}\n          </button>\n        </div>\n      </p>\n    );\n  }\n\n  //Returns the appropriate content depending on the number of questions remaining\n  const returnWord = (length) => {\n    if (length == 1) return length + \" intrebare\";\n    else return length + \" intrebari\";\n  };\n\n  //Starts from 0 : currentobjects, globalTime, learningMode, difficultyLevel, weekend\n  var content = Learn.returnvalues();\n\n  //Renders the final page\n  return (\n    <div className=\"test\">\n      <font size={24}>\n        <h1\n          className=\"display-1 position-absolute top-0 start-50\"\n          style={{ marginTop: \"7.5rem\" }}\n        >\n          Test\n        </h1>\n      </font>\n      <div className=\"romana\">\n        <div className=\"position-absolute top-50 start-50 translate-middle\">\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <div className=\"card\" style={{ width: \"40rem\" }}>\n                <div className=\"card-body\">\n                  <h5 className=\"card-title\">{intrebari[counter].materie}</h5>\n                  <h6 class=\"card-subtitle mb-2 text-muted\">\n                    {returnWord(\n                      intrebari.filter(\n                        (x) => x.materie == intrebari[counter].materie\n                      ).length\n                    )}\n                  </h6>\n                  {renderQuestion(counter)}\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-success\"\n                    onClick={submit}\n                  >\n                    {currWord}\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default {\n  Test,\n  API,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}